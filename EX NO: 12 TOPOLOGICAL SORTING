#include <stdio.h>
#include <stdlib.h>

// Structure for adjacency list node
typedef struct AdjListNode {
    int dest;
    struct AdjListNode *next;
} AdjListNode;

// Structure for adjacency list
typedef struct AdjList {
    struct AdjListNode *head;
} AdjList;

// Structure for graph
typedef struct Graph {
    int V; // Number of vertices
    struct AdjList *array;
} Graph;

// Function to create a new adjacency list node
AdjListNode *newAdjListNode(int dest) {
    AdjListNode *newNode = (AdjListNode *)malloc(sizeof(AdjListNode));
    newNode->dest = dest;
    newNode->next = NULL;
    return newNode;
}

// Function to create a graph with V vertices
Graph *createGraph(int V) {
    Graph *graph = (Graph *)malloc(sizeof(Graph));
    graph->V = V;

    // Create an array of adjacency lists. Size of the array will be V
    graph->array = (AdjList *)malloc(V * sizeof(AdjList));

    // Initialize each adjacency list as empty by making head as NULL
    for (int i = 0; i < V; ++i)
        graph->array[i].head = NULL;

    return graph;
}

// Function to add an edge to an undirected graph
void addEdge(Graph *graph, int src, int dest) {
    // Add an edge from src to dest
    AdjListNode *newNode = newAdjListNode(dest);
    newNode->next = graph->array[src].head;
    graph->array[src].head = newNode;

    // Since the graph is undirected, add an edge from dest to src also
    newNode = newAdjListNode(src);
    newNode->next = graph->array[dest].head;
    graph->array[dest].head = newNode;
}

// Function to display the ordering of vertices
void displayOrdering(Graph *graph) {
    printf("Ordering of vertices:\n");
    for (int i = 0; i < graph->V; ++i) {
        printf("%d: ", i);
        AdjListNode *temp = graph->array[i].head;
        while (temp != NULL) {
            printf("%d ", temp->dest);
            temp = temp->next;
        }
        printf("\n");
    }
}

// Driver program to test above functions
int main() {
    // Create a graph with 5 vertices
    int V = 5;
    Graph *graph = createGraph(V);

    // Add edges to the graph
    addEdge(graph, 0, 1);
    addEdge(graph, 0, 2);
    addEdge(graph, 1, 2);
    addEdge(graph, 1, 3);
    addEdge(graph, 2, 3);
    addEdge(graph, 3, 4);

    // Display the ordering of vertices
    displayOrdering(graph);

    return 0;
}
