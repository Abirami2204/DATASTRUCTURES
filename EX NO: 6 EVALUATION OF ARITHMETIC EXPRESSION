#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define MAX 100

// Stack implementation for strings
typedef struct {
    char* items[MAX];
    int top;
} Stack;

// Function to initialize the stack
void initStack(Stack* s) {
    s->top = -1;
}

// Function to check if the stack is empty
int isEmpty(Stack* s) {
    return s->top == -1;
}

// Function to check if the stack is full
int isFull(Stack* s) {
    return s->top == MAX - 1;
}

// Function to push an element onto the stack
void push(Stack* s, char* value) {
    if (isFull(s)) {
        printf("Stack overflow\n");
        return;
    }
    s->items[++(s->top)] = value;
}

// Function to pop an element from the stack
char* pop(Stack* s) {
    if (isEmpty(s)) {
        printf("Stack underflow\n");
        return NULL;
    }
    return s->items[(s->top)--];
}

// Function to get the top element of the stack
char* peek(Stack* s) {
    if (isEmpty(s)) {
        return NULL;
    }
    return s->items[s->top];
}

// Function to check if a character is an operator
int isOperator(char ch) {
    return ch == '+' || ch == '-' || ch == '*' || ch == '/';
}

// Function to convert postfix expression to infix
void postfixToInfix(char* postfix, char* infix) {
    Stack stack;
    initStack(&stack);

    for (int i = 0; i < strlen(postfix); i++) {
        char ch = postfix[i];

        if (isdigit(ch) || isalpha(ch)) {
            char* operand = (char*)malloc(2 * sizeof(char));
            operand[0] = ch;
            operand[1] = '\0';
            push(&stack, operand);
        } else if (isOperator(ch)) {
            char* op2 = pop(&stack);
            char* op1 = pop(&stack);

            int length = strlen(op1) + strlen(op2) + 4;
            char* expr = (char*)malloc(length * sizeof(char));

            snprintf(expr, length, "(%s%c%s)", op1, ch, op2);

            free(op1);
            free(op2);

            push(&stack, expr);
        }
    }

    strcpy(infix, pop(&stack));
}

int main() {
    char postfix[MAX];
    char infix[MAX];

    printf("Enter a postfix expression: ");
    fgets(postfix, MAX, stdin);

    // Remove newline character from input if present
    size_t len = strlen(postfix);
    if (postfix[len - 1] == '\n') {
        postfix[len - 1] = '\0';
    }

    postfixToInfix(postfix, infix);

    printf("Infix expression: %s\n", infix);

    return 0;
}
