#include <stdio.h>
#include <stdlib.h>

// Structure for adjacency list node
typedef struct AdjListNode {
    int dest;
    struct AdjListNode *next;
} AdjListNode;

// Structure for adjacency list
typedef struct AdjList {
    struct AdjListNode *head;
} AdjList;

// Structure for graph
typedef struct Graph {
    int V; // Number of vertices
    struct AdjList *array;
} Graph;

// Function to create a new adjacency list node
AdjListNode *newAdjListNode(int dest) {
    AdjListNode *newNode = (AdjListNode *)malloc(sizeof(AdjListNode));
    newNode->dest = dest;
    newNode->next = NULL;
    return newNode;
}

// Function to create a graph with V vertices
Graph *createGraph(int V) {
    Graph *graph = (Graph *)malloc(sizeof(Graph));
    graph->V = V;

    // Create an array of adjacency lists. Size of the array will be V
    graph->array = (AdjList *)malloc(V * sizeof(AdjList));

    // Initialize each adjacency list as empty by making head as NULL
    for (int i = 0; i < V; ++i)
        graph->array[i].head = NULL;

    return graph;
}

// Function to add an edge to an undirected graph
void addEdge(Graph *graph, int src, int dest) {
    // Add an edge from src to dest
    AdjListNode *newNode = newAdjListNode(dest);
    newNode->next = graph->array[src].head;
    graph->array[src].head = newNode;

    // Since the graph is undirected, add an edge from dest to src also
    newNode = newAdjListNode(src);
    newNode->next = graph->array[dest].head;
    graph->array[dest].head = newNode;
}

// Structure for a queue used in BFS
typedef struct Queue {
    int front, rear, size;
    unsigned capacity;
    int *array;
} Queue;

// Function to create a queue of given capacity
Queue *createQueue(unsigned capacity) {
    Queue *queue = (Queue *)malloc(sizeof(Queue));
    queue->capacity = capacity;
    queue->front = queue->size = 0;
    queue->rear = capacity - 1; // This is important, see the enqueue
    queue->array = (int *)malloc(queue->capacity * sizeof(int));
    return queue;
}

// Queue is full when size becomes equal to the capacity
int isFull(Queue *queue) {
    return (queue->size == queue->capacity);
}

// Queue is empty when size is 0
int isEmpty(Queue *queue) {
    return (queue->size == 0);
}

// Function to add an item to the queue. It changes rear and size
void enqueue(Queue *queue, int item) {
    if (isFull(queue))
        return;
    queue->rear = (queue->rear + 1) % queue->capacity;
    queue->array[queue->rear] = item;
    queue->size = queue->size + 1;
}

// Function to remove an item from queue. It changes front and size
int dequeue(Queue *queue) {
    if (isEmpty(queue))
        return -1;
    int item = queue->array[queue->front];
    queue->front = (queue->front + 1) % queue->capacity;
    queue->size = queue->size - 1;
    return item;
}

// Function to perform Breadth First Search traversal of the graph
void BFS(Graph *graph, int startVertex) {
    // Mark all the vertices as not visited
    int *visited = (int *)malloc(graph->V * sizeof(int));
    for (int i = 0; i < graph->V; i++)
        visited[i] = 0;

    // Create a queue for BFS
    Queue *queue = createQueue(graph->V);

    // Mark the current node as visited and enqueue it
    visited[startVertex] = 1;
    enqueue(queue, startVertex);

    // 'i' will be used to get all adjacent vertices of a vertex
    AdjListNode *temp;

    while (!isEmpty(queue)) {
        // Dequeue a vertex from queue and print it
        startVertex = dequeue(queue);
        printf("%d ", startVertex);

        // Get all adjacent vertices of the dequeued vertex startVertex
        // If an adjacent vertex has not been visited, then mark it visited and enqueue it
        temp = graph->array[startVertex].head;
        while (temp != NULL) {
            int adjVertex = temp->dest;
            if (!visited[adjVertex]) {
                visited[adjVertex] = 1;
                enqueue(queue, adjVertex);
            }
            temp = temp->next;
        }
    }
    printf("\n");
}

// Function to perform Depth First Search traversal of the graph
void DFSUtil(Graph *graph, int startVertex, int visited[]) {
    // Mark the current node as visited and print it
    visited[startVertex] = 1;
    printf("%d ", startVertex);

    // Recur for all the vertices adjacent to this vertex
    AdjListNode *temp = graph->array[startVertex].head;
    while (temp != NULL) {
        int adjVertex = temp->dest;
        if (!visited[adjVertex])
            DFSUtil(graph, adjVertex, visited);
        temp = temp->next;
    }
}

// Function to perform Depth First Search traversal of the graph
void DFS(Graph *graph, int startVertex) {
    // Mark all the vertices as not visited
    int *visited = (int *)malloc(graph->V * sizeof(int));
    for (int i = 0; i < graph->V; i++)
        visited[i] = 0;

    // Call the recursive helper function to print DFS traversal
    DFSUtil(graph, startVertex, visited);
    printf("\n");
}

// Driver program to test above functions
int main() {
    // Create a graph with 5 vertices
    int V = 5;
    Graph *graph = createGraph(V);

    // Add edges to the graph
    addEdge(graph, 0, 1);
    addEdge(graph, 0, 2);
    addEdge(graph, 1, 2);
    addEdge(graph, 1, 3);
    addEdge(graph, 2, 3);
    addEdge(graph, 3, 4);

    printf("Depth First Search (DFS) traversal starting from vertex 0:\n");
    DFS(graph, 0);

    printf("Breadth First Search (BFS) traversal starting from vertex 0:\n");
    BFS(graph, 0);

    return 0;
}
